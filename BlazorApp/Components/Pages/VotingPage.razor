@page "/votacao/{Id:int}"
@using Microsoft.AspNetCore.Authentication
@layout Layout.MainLayout
@inject PageHelper PageHelper
@inject VotingService VotingService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject AuthService AuthService
    
<style>
    .mud-icon-root.mud-svg-icon {
        fill: white;
    }
    .voting-option:hover {
        cursor: pointer;
        background-color: rgba(179, 246, 179, 0.51);
    }

    @@media (min-width: 551px) {
        .fixed-button {
            height: 3rem;
            background-color: rgb(22, 156, 102);
            color: white;
            border: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: background-color 0.6s, box-shadow 0.6s;
            animation: fadeIn 3s ease-in-out forwards;
        }
        
    }

    .fixed-button:hover {
        background-color: rgb(0, 115, 78);
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);
    }

    @@media (max-width: 550px) {
        .fixed-button {
            width: 100%;
            height: 3rem;
            background-color: rgb(22, 156, 102);
            color: white;
            border: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: background-color 0.6s, box-shadow 0.6s;
        }
    }
</style>

<PageTitle>Votação</PageTitle>

@if (_isLoading)
{
    <div class="w-100 vh-100 mt-5 d-flex flex-row justify-content-center align-items-center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else
{
    <MudContainer Class="voting-container w-100 mt-10 d-flex flex-column align-items-start px-0"
                  Style="border-radius: 8px; box-shadow: rgba(88,170,101,0.6) 1px 1px 1px; border-width: 1px; border-color: #83b883">
        <MudContainer @onclick="ClickOnExpand"
                      Style="background-color: rgb(23,104,78); border-radius: 8px 8px 0 0; "
                      Class="w-100 d-flex flex-row justify-content-start align-items-center">
            <MudIcon Icon="@Icons.Material.Outlined.CheckCircle" Class="me-3"></MudIcon>
            <MudText Class="fw-bold my-3" Typo="Typo.h6" Style="color: white">@_voting.Title</MudText>
        </MudContainer>
        <MudContainer Class="w-100">
            <MudContainer Class="w-100 mt-5"
                          Style="background-color: #e0ffdf; border-radius: 8px; border-width: 1px; border-color: #83b883">
                <MudText Typo="Typo.body1"
                         Class="mb-4 pt-3">
                    @_voting.Description
                </MudText>
            </MudContainer>
        </MudContainer>
        <MudContainer Class="voting-container w-100 mt-5 d-flex flex-column align-items-center">
            @foreach (var option in _voting.VotingOptions)
            {
                <MudContainer @onclick="() => SelectOption(option.Id)"
                              Class="voting-option w-100 px-3 mx-0 mb-3 d-flex flex-row justify-content-start align-items-center"
                              Style="@GetOptionContainerStyle(option.Id)">
                    <div style="@GetRadioStyle(option.Id)"></div>
                    <MudText Style="font-size: 1.15rem" Class="fw-bold ms-3">@option.Name</MudText>
                </MudContainer>
            }
        </MudContainer>
        <MudContainer Class="w-100 d-flex flex-row justify-content-end mt-2 mb-3">
            <MudButton OnClick="ConfirmVote" Class="fixed-button mt-0">Confirmar voto</MudButton>
        </MudContainer>
    </MudContainer>
    
}


@code {
    [Parameter] public int Id { get; set; }
    private Voting _voting = new();
    private bool _isLoading = true;
    private bool _expanded;
    private Vote _vote = new();
    private User? _user;
    private int _selectedOptionId;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PageHelper.ShowBusy(ref _isLoading, async () =>
            {
                try
                {
                    _user = await AuthService.GetUserByClaims();
                    if (_user is null) throw new AuthenticationFailureException("Não foi possível autenticar o usuário. Por favor, faça login.");
                    _voting = await VotingService.GetVotingById(Id, (int) _user.Id!);
                    StateHasChanged();
                }
                catch (Exception e)
                {
                    var result = await DialogService.ShowMessageBox("Erro!", e.Message);
                    NavigationManager.NavigateTo("votacoes");
                }
            });
        }
    }

    private void ClickOnExpand()
    {
        _expanded = !_expanded;
    }
    
    private string GetOptionContainerStyle(int optionId)
    {
        var baseStyle = "height: 4.5rem; border-width: 1px; border-radius: 8px; border-color: #83b883;";
        
        var backgroundColor = optionId == _selectedOptionId ? "rgba(179, 246, 179, 0.51)" : "";

        return $"{baseStyle} background-color: {backgroundColor};";
    }

    private string GetRadioStyle(int optionId)
    {
        var baseStyle = "height: 20px; width: 20px; border-radius: 50%; border-width: 2px;";
        var backgroundColor = optionId == _selectedOptionId ? "rgba(59, 155, 59, 0.77); border-color: white" : "white; border-color: rgb(23,104,78);";
        return $"{baseStyle} background-color: {backgroundColor};";
    }

    private void SelectOption(int votingOptionId)
    {
        _selectedOptionId = votingOptionId;
        _vote = new Vote
        {
            VotingOptionId = votingOptionId,
            UserId = (int) _user!.Id!
        };
    }

    private async Task ConfirmVote()
    {
        if (_selectedOptionId is 0)
        {
            await DialogService.ShowMessageBox("Erro!", "Por favor, selecione uma das opções de voto!");
            return;
        }

        _isLoading = true;
        await PageHelper.ShowBusy(ref _isLoading, async () =>
        {
            try
            {
                await VotingService.ConfirmVote(_vote);
            }
            catch (Exception e)
            {
                await DialogService.ShowMessageBox("Erro!", "Ocorreu um erro. Não foi possível confirmar o voto.");
            }
        });
        StateHasChanged();

        var result = await DialogService.ShowMessageBox("Parabéns!", "Seu voto foi processado com sucesso. Garantimos a sua privacidade e a confidencialidade da votação.");
        if(result.HasValue && result.Value) 
            NavigationManager.NavigateTo("votacoes");
    }
}