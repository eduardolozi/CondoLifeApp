@page "/notificacoes"
@layout Layout.MainLayout
@inject NotificationService NotificationService
@inject PageHelper PageHelper
@inject AuthService AuthService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<style>
    .mud-tab-slider.mud-tab-slider-horizontal {
        height: 3px;
        background: rgb(81, 255, 92);
    }
    
    .notification:hover {
        cursor: pointer;
    }

    .mud-tabs-tabbar-content {
        border-radius: 12px;
    }
    
    .filters-tab {
        width: 100%;
    }
    
    @@media (max-width: 1060px) and (min-width: 640px) {
       .filters-tab {
           width: 60vw;
       } 
    }
    
    @@media (max-width: 970px) {
        .notification-container {
            width: 75% !important;
        }
    }
</style>

<PageTitle>Notificações</PageTitle>

    <MudTabs SliderAnimation="true" Centered="true" ActiveTabClass="" Class="mt-5 mb-2 filters-tab">
        <MudTabPanel Style="background-color: #00734e; color: white" Text="Todas"/>
        <MudTabPanel Style="background-color: #00734e; color: white" Text="Reservas"/>
        <MudTabPanel Style="background-color: #00734e; color: white" Text="Publicações"/>
        <MudTabPanel Style="background-color: #00734e; color: white" Text="Comunicados Gerais"/>
        <MudTabPanel Style="background-color: #00734e; color: white" Text="Financeiro"/>
    </MudTabs>
<MudContainer Class="d-flex flex-column align-items-center">
    @if (_isLoading)
    {
        <div class="w-100 mt-5 d-flex flex-row justify-content-center align-items-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else
    {
        <MudContainer Class="mt-5 h-75 w-50 d-flex flex-column justify-content-start px-0 notification-container">
            @foreach (var notification in _notifications)
            {
                <MudContainer Class="mb-2 w-100 d-flex flex-column align-items-start py-3 notification" Style="@($"border-radius: 6px; background-color: {(notification.IsRead ? "rgba(189,186,186,0.16)" : "rgba(172, 247, 255, 0.77)")}; border-width: 1px; border-color: #6E6D6D28")" @onclick="() => OpenNotification(notification)">
                    <MudText Typo="Typo.body1" Class="fw-bolder">@notification.Message.Header</MudText>
                    <MudText Typo="Typo.body2">@notification.Message.Body</MudText>
                    <div class="d-flex flex-row w-100 justify-content-end mt-3 pe-0">
                        <MudText Typo="Typo.caption" Style="color: #bdbaba">@notification.CreatedAt.GetElapsedTime()</MudText>
                    </div>
                </MudContainer>
            }
            @* <MudContainer Class="m-0 w-100 d-flex flex-column align-items-start py-3" Style="border-radius: 8px 8px 0 0; background-color: rgba(0, 162, 121, 0.22); border-bottom-width: 1px; border-color: #6c757d"> *@
            @*     <MudText Typo="Typo.body1" Class="fw-bolder">Nova reserva feita</MudText> *@
            @*     <MudText Typo="Typo.body2">Eduardo Lozano fez o pagamento da reserva no espaço: Churrasqueira</MudText> *@
            @* </MudContainer> *@
            @* <MudContainer Class="m-0 w-100 d-flex flex-column align-items-start py-3" Style="background-color: rgba(0, 162, 121, 0.22); border-bottom-width: 1px; border-color: #6c757d"> *@
            @*     <MudText Typo="Typo.body1" Class="fw-bolder">Nova reserva feita</MudText> *@
            @*     <MudText Typo="Typo.body2">Icaro Carneiro solicitou uma reserva no espaço: Piscina</MudText> *@
            @* </MudContainer> *@
            @* <MudContainer Class="m-0 w-100 d-flex flex-column align-items-start py-3" Style="background-color: rgba(189,186,186,0.16); border-bottom-width: 1px; border-color: #6c757d"> *@
            @*     <MudText Typo="Typo.body1" Class="fw-bolder">Nova reserva feita</MudText> *@
            @*     <MudText Typo="Typo.body2">Icaro Carneiro solicitou uma reserva no espaço: Piscina</MudText> *@
            @* </MudContainer> *@
            @* <MudContainer Class="m-0 w-100 d-flex flex-column align-items-start py-3" Style="background-color: rgba(189,186,186,0.16); border-bottom-width: 1px; border-color: #6c757d"> *@
            @*     <MudText Typo="Typo.body1" Class="fw-bolder">Nova reserva feita</MudText> *@
            @*     <MudText Typo="Typo.body2">Icaro Carneiro solicitou uma reserva no espaço: Piscina</MudText> *@
            @* </MudContainer> *@
            @* <MudContainer Class="m-0 w-100 d-flex flex-column align-items-start py-3" Style="background-color: rgba(189,186,186,0.16); border-bottom-width: 1px; border-color: #6c757d"> *@
            @*     <MudText Typo="Typo.body1" Class="fw-bolder">Nova reserva feita</MudText> *@
            @*     <MudText Typo="Typo.body2">Icaro Carneiro solicitou uma reserva no espaço: Piscina</MudText> *@
            @* </MudContainer> *@
        </MudContainer>
    }
</MudContainer>

@code {
    List<Notification> _notifications = [];
    bool _isLoading = true;
    User? _user;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PageHelper.ShowBusy(ref _isLoading, async () =>
            {
                try
                {
                    _user = await AuthService.GetUserByClaims();
                    _notifications = await NotificationService.GetAll(new NotificationFilter
                    {
                        UserId = _user.Id
                    });
                }
                catch (Exception e)
                {
                    await DialogService.ShowMessageBox("Usuário não autorizado.", e.Message);
                }
            });
            StateHasChanged();
            
            var firstOpenNotification = _notifications.OrderBy(x => x.Id).FirstOrDefault(x => x.IsRead == false);
            if (firstOpenNotification is not null)
            {
                await NotificationService.MarkNotificationsAsReaded(_user!.Id, firstOpenNotification.Id);
            }
        }
    }

    void OpenNotification(Notification notification)
    {
        if (notification.NotificationType is NotificationTypeEnum.BookingCreated || notification.NotificationType is NotificationTypeEnum.BookingApproved)
        {
            if(notification.BookingId.HasValue) 
                NavigationManager.NavigateTo($"reserva/{notification.BookingId}");
        }
    }
 
}