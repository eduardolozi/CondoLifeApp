@page "/configuracoes"
@using System.Net.Mime
@using Blazored.LocalStorage
@layout Layout.MainLayout
@inject UserService userService
@inject IDialogService dialogService
@inject PageHelper PageHelper
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<style type="text/css">
    .input-form {
        width: 100%;
    }

    .tamanho-tab {
        width: 50%;    
    }
    
    .titulo-tab {
        color: #0f0f0f !important;
        font-weight: bold;
    }
    
    .mud-tab-slider {
        background: #00a82d !important;
    }
    
    @@media (max-width: 1100px) {
        .tamanho-tab{
            width: 100%;
        }
    }
</style>

<PageTitle>Configurações</PageTitle>
@if (_componentIsLoading)
{
    <div class="w-100 vh-100 mt-5 d-flex flex-row justify-content-center align-items-center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else
{
    <MudContainer Class="d-flex flex-row justify-content-center mt-10">
        <MudTabs Class="my-5 tamanho-tab" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Usuário" Class="titulo-tab">
                <MudCard Class="d-flex flex-column align-items-center" Elevation="0">
                    <MudCardHeader Class="d-flex flex-column align-items-start">
                        <MudText Typo="Typo.h5" Class="fw-bold">Informações do usuário</MudText>
                        <MudText Typo="Typo.subtitle1">Gerencie suas informações pessoais e dados do apartamento.</MudText>
                    </MudCardHeader>
                    <MudCardContent Style="width: 100%" Class="d-flex flex-column align-items-center">
                        @if (_photoIsLoading){
                            <MudProgressCircular Color="Color.Primary" Style="width: 50px; height: 50px" Indeterminate="true" />
                        }
                        else {
                            <MudImage Elevation="5" Style="width: 150px; height: 150px; border-radius: 50%;" Src="@_base64Image"></MudImage>
                        }
                        <MudFileUpload Class="mt-3 mb-5" T="IBrowserFile" FilesChanged="UploadImage" Accept=".png, .jpg">
                            <ActivatorContent>
                                <MudContainer Class="d-flex flex-row p-0">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Success"
                                               StartIcon="@Icons.Material.Filled.CloudUpload">
                                        Selecione a sua foto
                                    </MudButton>
                                </MudContainer>
                            </ActivatorContent>
                        </MudFileUpload>
                        <MudTextField Placeholder="Nome"
                                      @bind-Value="_user.Name"
                                      Variant="Variant.Outlined"
                                      Class="mt-3 mb-5"
                                      FullWidth="true">
                        </MudTextField>
                        <MudTextField Placeholder="Email"
                                      @bind-Value="_user.Email"
                                      Variant="Variant.Outlined"
                                      Class="mb-5"
                                      FullWidth="true">
                        </MudTextField>
                        <MudPaper Style="width: 100%" Elevation="0" Class="d-flex flex-row">
                            <MudTextField Placeholder="N° Apto"
                                          @bind-Value="_user.Apartment"
                                          Variant="Variant.Outlined"
                                          Style="width: 55%"
                                          FullWidth="true">
                            </MudTextField>
                            <MudTextField Placeholder="Bloco"
                                          @bind-Value="_user.Block"
                                          Variant="Variant.Outlined"
                                          Style="width: 50%"
                                          FullWidth="true">
                            </MudTextField>
                        </MudPaper>
                    </MudCardContent>
                    <MudCardActions Class="w-100">
                        <MudButton Class="mt-5 w-100"
                                   Style="background-color: #019863; color: white"
                                   Size="Size.Large"
                                   Variant="Variant.Filled"
                                   OnClick="SaveUserChanges">
                            Salvar alterações no usuário
                        </MudButton>
                    </MudCardActions>
                    @if (_isLoading) { 
                        <MudProgressCircular Class="my-3" Indeterminate="true" Color="Color.Primary" />
                    }
                </MudCard>
            </MudTabPanel>
            <MudTabPanel Text="Notificações" Class="titulo-tab">
                <MudContainer Class="w-100 d-flex flex-column align-items-start justify-content-between">
                    <MudContainer Class="pt-3 pb-2 px-4 w-100" Style="border-radius: 8px; border-color: rgba(125,129,129,0.46); border-width: 1px; background-color: rgba(125,129,129,0.05)">
                        <MudText>Receber notificações no email:</MudText>
                        <MudSwitch @bind-Value="_user!.NotifyEmail" Color="Color.Success"></MudSwitch>
                    </MudContainer>
                    <MudContainer Class="pt-3 pb-2 px-4 w-100 mt-3" Style="border-radius: 8px; border-color: rgba(125,129,129,0.46); border-width: 1px; background-color: rgba(125,129,129,0.05)">
                        <MudText>Receber notificações no celular:</MudText>
                        <MudSwitch @bind-Value="_user!.NotifyPhone" Color="Color.Success"></MudSwitch>
                    </MudContainer>
                    <MudContainer Class="w-100 mt-3 px-0">
                        <MudSelect @bind-Value="_lifetimeValue" Class=" w-100" Variant="Variant.Outlined" Label="Tempo até as notificações serem removidas">
                            @foreach (var lifetimeOption in _notificationLifetime)
                            {
                                <MudSelectItem Value="lifetimeOption">@lifetimeOption</MudSelectItem>
                            }
                        </MudSelect>
                    </MudContainer>
                    <MudButton Class="w-100 mx-0 mt-5" Style="background-color: #019863; color: white"
                               Size="Size.Large" Variant="Variant.Filled" OnClick="SaveUserNotificationConfigs">
                        Salvar alterações nas notificações
                    </MudButton>
                </MudContainer>
            </MudTabPanel>
        </MudTabs>
    </MudContainer>
}

@code
{
    [Inject] private AuthService _authService { get; set; }
    string _base64Image = string.Empty;
    User? _user = new User();
    bool _photoIsLoading = true;
    private const long MAX_ALLOWED_SIZE = 8388608;
    private string[] _notificationLifetime = ["Não excluir as notificações", "30", "90", "180", "360"];
    bool _componentIsLoading = true;
    string _lifetimeValue = string.Empty;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            await PageHelper.ShowBusy(ref _componentIsLoading, async () =>
            {
                _user = await _authService.GetUserByClaims();
                if (_user is not null)
                {
                    StateHasChanged();
                    _lifetimeValue = (_user.NotificationLifetime is null or 0 ? "Não excluir as notificações" : _user.NotificationLifetime.ToString())!;
                    var param = string.IsNullOrEmpty(_user.PhotoUrl) ? $"{_user.Id}/photo" : _user.PhotoUrl;
                    var photo = await userService.GetPhoto(param);
                    if (photo is not null)
                    {
                        _base64Image = string.IsNullOrEmpty(photo.ContentBase64) ? "/blank-profile-picture.png" : $"data:image/png;base64,{photo.ContentBase64}";
                        _photoIsLoading = false;
                        StateHasChanged();
                    }
                }
                else
                {
                    await dialogService.ShowMessageBox("Erro!", "Não foi possível autenticar o usuário. Por favor, faça login.");
                    NavigationManager.NavigateTo("login");
                }
            });
        }
    }

    async Task UploadImage(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(MAX_ALLOWED_SIZE).CopyToAsync(memoryStream);
            var fileBytes = memoryStream.ToArray();
            _user!.Photo = new Photo
            {
                ContentBase64 = Convert.ToBase64String(fileBytes),
                FileName = file.Name,
                ContentType = file.ContentType
            };
            _base64Image = $"data:image/png;base64,{_user.Photo.ContentBase64}";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await dialogService.ShowMessageBox("Erro!", "O tamanho do arquivo é maior do que o esperado. Por favor, selecione uma imagem com no máximo 1MB");
        }
    }

    bool _isLoading;
    async Task SaveUserChanges()
    {
        try
        {
            _isLoading = true;
            var result = await userService.UpdateUserData(new UpdateUserDataDTO {
                Id = (int) _user!.Id!,
                Apartment = (int) _user.Apartment!,
                Name = _user.Name,
                Block = _user.Block!,
                Email = _user.Email,
                Photo = _user.Photo
            });
            
            if (!result.IsSuccess)
            {
                await dialogService.ShowMessageBox("Erro ao atualizar!", "Verifique os dados alterados.", "OK");
                return;
            }

            await localStorage.RemoveItemsAsync(["accessToken", "refreshToken", "userPhoto"]);

            await localStorage.SetItemAsStringAsync("accessToken", result.AccessToken!);
            await localStorage.SetItemAsStringAsync("refreshToken", result.RefreshToken!);
            
            await dialogService.ShowMessageBox("Perfil atualizado!", "Seus dados foram editados com sucesso!.", "OK");
        }
        finally
        {
            _isLoading = false;
        }

    }

    private async Task SaveUserNotificationConfigs()
    {
        try
        {
            _isLoading = true;
            _user!.NotificationLifetime = _lifetimeValue is "Não excluir as notificações" ? null : Convert.ToInt32(_lifetimeValue);
            var result = await userService.UpdateNotificationConfigs(new UpdateUserNotificationConfigsDTO {
                Id = (int) _user.Id!,
                NotificationLifetime = _user.NotificationLifetime,
                NofifyEmail = _user.NotifyEmail,
                NofifyPhone = _user.NotifyPhone
            });
            
            if (!result.IsSuccess)
            {
                await dialogService.ShowMessageBox("Erro ao atualizar!", "Verifique os dados alterados.", "OK");
                return;
            }

            await localStorage.RemoveItemsAsync(["accessToken", "refreshToken", "userPhoto"]);

            await localStorage.SetItemAsStringAsync("accessToken", result.AccessToken!);
            await localStorage.SetItemAsStringAsync("refreshToken", result.RefreshToken!);
            
            await dialogService.ShowMessageBox("Perfil atualizado!", "Seus dados foram editados com sucesso!.", "OK");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
