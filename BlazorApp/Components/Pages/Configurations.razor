@page "/configuracoes"
@using Blazored.LocalStorage
@layout Layout.MainLayout
@inject UserService userService
@inject IDialogService dialogService
@inject ILocalStorageService localStorage

<style type="text/css">
    .input-form {
        width: 100%;
    }

    .tamanho-tab {
        width: 50%;    
    }
    
    .titulo-tab {
        color: #0f0f0f !important;
        font-weight: bold;
    }
    
    .mud-tab-slider {
        background: #00a82d !important;
    }
    
    @@media (max-width: 1100px) {
        .tamanho-tab{
            width: 100%;
        }
    }
</style>

<PageTitle>Configurações</PageTitle>

<MudContainer Class="d-flex flex-row justify-content-center mt-10">
    <MudTabs Class="my-5 tamanho-tab" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Usuário" Class="titulo-tab">
            <MudCard Class="d-flex flex-column align-items-center" Elevation="0">
                <MudCardHeader Class="d-flex flex-column align-items-start">
                    <MudText Typo="Typo.h5" Class="fw-bold">Informações do usuário</MudText>
                    <MudText Typo="Typo.subtitle1">Gerencie suas informações pessoais e dados do apartamento.</MudText>
                </MudCardHeader>
                <MudCardContent Style="width: 100%" Class="d-flex flex-column align-items-center">
                    <MudImage Elevation="5" Style="width: 150px; height: 150px; border-radius: 50%;" Src="@_base64Image"></MudImage>
                    <MudFileUpload Class="mt-3 mb-5" T="IBrowserFile" FilesChanged="UploadImage" Accept=".png, .jpg">
                        <ActivatorContent>
                            <MudContainer Class="d-flex flex-row p-0">
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Success"
                                           StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Selecione a sua foto
                                </MudButton>
                            </MudContainer>
                        </ActivatorContent>
                    </MudFileUpload>
                    <MudTextField Placeholder="Nome"
                                  @bind-Value="_user.Name"
                                  Variant="Variant.Outlined"
                                  Class="mt-3 mb-5"
                                  FullWidth="true">
                    </MudTextField>
                    <MudTextField Placeholder="Email"
                                  @bind-Value="_user.Email"
                                  Variant="Variant.Outlined"
                                  Class="mb-5"
                                  FullWidth="true">
                    </MudTextField>
                    <MudPaper Style="width: 100%" Elevation="0" Class="d-flex flex-row">
                        <MudTextField Placeholder="N° Apto"
                                      @bind-Value="_user.Apartment"
                                      Variant="Variant.Outlined"
                                      Style="width: 55%"
                                      FullWidth="true">
                        </MudTextField>
                        <MudTextField Placeholder="Bloco"
                                      @bind-Value="_user.Block"
                                      Variant="Variant.Outlined"
                                      Style="width: 50%"
                                      FullWidth="true">
                        </MudTextField>
                    </MudPaper>
                </MudCardContent>
                <MudCardActions Class="w-100">
                    <MudButton Class="mt-5 w-100"
                               Color="Color.Success"
                               Size="Size.Large"
                               Variant="Variant.Filled"
                               OnClick="SaveUserChanges">
                        Salvar alterações
                    </MudButton>
                </MudCardActions>
                @if (_isLoading) { 
                    <MudProgressCircular Class="my-3" Indeterminate="true" Color="Color.Primary" />
                }
            </MudCard>
        </MudTabPanel>
        <MudTabPanel Text="Notificações" Class="titulo-tab">
            <MudText>Content Two</MudText>
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code
{
    [Inject] private AuthService _authService { get; set; }
    string _base64Image = string.Empty;
    User? _user = new User();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _user = await _authService.GetUserByClaims();
            if (_user is not null)
            {
                var param = string.IsNullOrEmpty(_user.PhotoUrl) ? $"{_user.Id}/photo" : _user.PhotoUrl; 
                var photo = await userService.GetPhoto(param);
                if (photo is not null)
                {
                    _base64Image = string.IsNullOrEmpty(photo.ContentBase64) ? "/blank-profile-picture.png" : $"data:image/png;base64,{photo.ContentBase64}";
                    StateHasChanged();
                }
            }
        }
    }

    async Task UploadImage(IBrowserFile file)
    {
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        var fileBytes = memoryStream.ToArray();
        _user!.Photo = new Photo
        {
            ContentBase64 = Convert.ToBase64String(fileBytes),
            FileName = file.Name,
            ContentType = file.ContentType
        };
        _base64Image = $"data:image/png;base64,{_user.Photo.ContentBase64}";
        StateHasChanged();
    }

    bool _isLoading;
    async Task SaveUserChanges()
    {
        try
        {
            _isLoading = true;
            var result = await userService.Update(_user);
            if (!result.IsSuccess)
            {
                await dialogService.ShowMessageBox("Erro ao atualizar!", "Verifique os dados alterados.", "OK");
                return;
            }

            await localStorage.RemoveItemsAsync(["accessToken", "refreshToken", "userPhoto"]);

            await localStorage.SetItemAsStringAsync("accessToken", result.AccessToken!);
            await localStorage.SetItemAsStringAsync("refreshToken", result.RefreshToken!);
            
            await dialogService.ShowMessageBox("Perfil atualizado!", "Seus dados foram editados com sucesso!.", "OK");
        }
        finally
        {
            _isLoading = false;
        }

    }
}
