@page "/espacos"
@using Microsoft.AspNetCore.Authentication
@layout Layout.MainLayout
@inject SpaceService SpaceService
@inject AuthService AuthService
@inject IDialogService DialogService
@inject PageHelper PageHelper
@inject NavigationManager Navigation

<style>
    .space-card {
        width: 45%;
    }
    
    .card-buttons {
        display: flex;
        justify-content: end;
    }

    .fixed-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        background-color: rgb(0, 115, 78);
        color: white;
        border: none;
        border-radius: 50%;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        font-size: 24px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: background-color 0.3s, box-shadow 0.3s;
        z-index: 1000;
    }

    .fixed-button:hover {
        background-color: rgb(0, 115, 78);
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);
    }

    @@media (max-width: 1400px) {
        .card-buttons {
            display: flex;
            flex-direction: column;
        }

        .phone-button {
            width: 90%;
            height: 2rem;
            margin-bottom: .8rem;
        }
    }
    
    @@media (max-width: 950px) {
        .space-card {
            width: 100%;
        }
    }
    
    @@media (max-width: 1140px) {
        .space-card {
            width: 80%;
        }
    }
</style>

<PageTitle>Gerenciamento dos Espaços</PageTitle>
<MudContainer Class="w-100 d-flex flex-row justify-content-end mt-5 me-0 pe-0">
    <MudButton Class="fixed-button" OnClick="OpenRegisterDialog"> + </MudButton>
</MudContainer>
@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Class="position-absolute top-50 start-50" Indeterminate="true" />
}
else
{
    <MudContainer Class="h-100 mt-5 d-flex flex-row justify-content-around flex-wrap">
        @if (_spaces.Count > 0)
        {
            @foreach (var space in _spaces)
            {
                <MudCard Class="mb-5 space-card">
                    <MudCardHeader Class="h-100 pt-0 px-0 mx-0 d-flex flex-column">
                        <MudImage Src="@(space.Photo is null ? string.Empty : $"data:image/png;base64,{space.Photo.ContentBase64}")"
                                  Elevation="0"
                                  Style="width: 100% !important; height: 400px !important;"
                                  Class="px-0 my-0 py-0 mx-0">
                        </MudImage>
                    </MudCardHeader>
                    <MudCardContent Style="padding-top: 0 !important;"
                                    Class="d-flex flex-row justify-content-between">
                        <div class="d-flex flex-column justify-content-center align-items-start">
                            <MudText Typo="Typo.h5"
                                     Class="fw-bold">
                                @space.Name
                            </MudText>
                            <MudText Typo="Typo.subtitle1">
                                Valor da reserva: R$ @(space.BookingPrice ?? 0)
                            </MudText>
                        </div>
                        <MudChip T="string"
                                 Class="mb-2"
                                 Size="Size.Small"
                                 Color="@(space.Availability ? Color.Success : Color.Error)">
                            @(space.Availability ? "Disponível" : "Indisponível")
                        </MudChip>
                    </MudCardContent>
                    <MudCardActions Class="card-buttons mb-1">
                        <MudButton Size="Size.Small"
                                   Class="mx-2 phone-button"
                                   Style="background-color: #55479c; color: white;"
                                   Variant="Variant.Filled"
                                   StartIcon="@Icons.Material.Filled.CalendarMonth"
                                   Disabled="@(!space.Availability)"
                                   OnClick="async () => await OpenRegisterBookingDialog(space)">
                            Reservar
                        </MudButton>
                        @if (_user is not null)
                        {
                            @if (_user.Role is UserRoleEnum.Manager || _user.Role is UserRoleEnum.Submanager)
                            {
                                <MudButton Size="Size.Small"
                                           Class="mx-1 phone-button"
                                           Variant="Variant.Outlined"
                                           StartIcon="@Icons.Material.Filled.Edit"
                                           Color="Color.Info"
                                           OnClick="@(async () => await OpenEditDialog(space))">
                                    Editar
                                </MudButton>
                                <MudButton Size="Size.Small"
                                           Class="mx-1 phone-button"
                                           Variant="Variant.Outlined"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           OnClick="@(async () => await DeleteSpace(space.Id))">
                                    Remover
                                </MudButton>
                                <MudButton Size="Size.Small"
                                           Class="mx-2 phone-button"
                                           Variant="Variant.Outlined"
                                           StartIcon="@Icons.Material.Filled.Assignment"
                                           Color="Color.Warning"
                                           OnClick="@(async () => await OpenBookingDialog(space))">
                                    Agendamentos
                                </MudButton>
                            }
                        }

                    </MudCardActions>
                </MudCard>
            }
        }
        else
        {
            <MudContainer Class="d-flex flex-column justify-content-center align-items-center mt-20">
                <img src="svg-not-found.svg" alt="Logo" style="width:200px; margin-top: 2rem" />
                <MudText Class="mt-2" Typo="Typo.h6">Não existe nenhum espaço cadastrado</MudText>
            </MudContainer>
        }
    </MudContainer>
}

@code
{
    List<Space> _spaces = [];
    bool _isLoading = true;
    User? _user;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await PageHelper.ShowBusy(ref _isLoading, async () =>
                {
                    _user = await AuthService.GetUserByClaims();
                    await GetSpaces();
                });
            }
            catch (AuthenticationFailureException ex)
            {
                await DialogService.ShowMessageBox("Erro!", ex.Message);
                Navigation.NavigateTo("login");
            }

            StateHasChanged();
        }
    }

    async Task GetSpaces()
    {
        var filter = new SpaceFilter
        {
            CondominiumId = _user!.CondominiumId
        };
        _spaces = await SpaceService.GetCondominiumSpaces(filter) ?? [];
        foreach (var space in _spaces)
        {
            space.Photo = await SpaceService.GetSpacePhoto(space.Id);
        }
    }

    async Task DeleteSpace(int id)
    {
        var result = await DialogService.ShowMessageBox("Confirmação de remoção",
            "Deseja realmente excluir o espaço? Todos os agendamentos vinculados também serão excluídos.",
            "Sim",
            "Não");
        
        if (result.HasValue)
        {
            if (result.Value)
            {
                await PageHelper.ShowBusy(ref _isLoading, async () =>
                {
                    await SpaceService.Delete(id);
                    await GetSpaces();
                });
            }
        }
    }

    async Task OpenRegisterDialog()
    {
        var parameters = new DialogParameters<RegisterSpaceDialog>
        {
            {x => x.CondominiumId, _user!.CondominiumId}
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<RegisterSpaceDialog>("Adicionar espaço", parameters, options);
        var result = await dialog.Result;
        if (result.Data is true)
        {
            await PageHelper.ShowBusy(ref _isLoading, async () =>
            {
                await GetSpaces();
            });
        }
    }

    async Task OpenEditDialog(Space space)
    {
        var parameters = new DialogParameters<RegisterSpaceDialog>
        {
            {x => x.CondominiumId, _user!.CondominiumId},
            {x => x.Space, new Space
                                            {
                                                Id = space.Id,
                                                Name = space.Name,
                                                Availability = space.Availability,
                                                Photo = space.Photo,
                                                PhotoUrl = space.PhotoUrl,
                                                BookingPrice = space.BookingPrice
                                            }
            }
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<RegisterSpaceDialog>("Editar espaço", parameters, options);
        var result = await dialog.Result;
        if (result.Data is true)
        {
            await PageHelper.ShowBusy(ref _isLoading, async () =>
            {
                await GetSpaces();
            });
        }
    }

    async Task OpenBookingDialog(Space space)
    {
        var parameters = new DialogParameters<SpaceBookingDialog>
        {
            {x => x.SpaceId, space.Id}
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        await DialogService.ShowAsync<SpaceBookingDialog>($"Agendamentos {space.Name}", parameters, options);
    }

    async Task OpenRegisterBookingDialog(Space space)
    {
        var parameters = new DialogParameters<RegisterBookingDialog>
        {
            {x => x.SpaceId, space.Id},
            {x => x.UserId, (int)_user!.Id!},
            {x => x.BookingPrice, space.BookingPrice}
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<RegisterBookingDialog>($"Faça a sua reserva", parameters, options);
    }
}
