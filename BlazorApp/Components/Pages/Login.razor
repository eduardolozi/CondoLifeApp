@page "/login"
@layout Layout.EmptyAppBarLayout
@inject NavigationManager Navigation
@inject AuthService authService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject UserService userService

<PageTitle>Login</PageTitle>

<MudGrid Class="d-flex flex-column align-items-center mt-0" Justify="Justify.FlexStart" Style="height: 100vh; padding-bottom:8rem;">
    <MudItem Class="d-flex flex-column align-items-center"
             xs="5"
             sm="3">

        <MudPaper Class="d-flex flex-column align-items-center pt-6"
                  Width="180%"
                  Elevation="1">

            <MudText Class="mb-8"
                     Typo="Typo.h4"
                     Style="color: #0A0A0A; font-weight: bold">
                Entre agora!
            </MudText>

            <MudTextField Class="mb-9 w-75"
                          @bind-Value="_email"
                          Variant="Variant.Outlined"
                          Placeholder="Email"
                          InputMode="InputMode.email"
                          InputType="InputType.Email">
            </MudTextField>

            <MudContainer Class="w-75 p-0 d-flex flex-column align-items-end">
                <MudTextField Class="w-100 m-0"
                              @bind-Value="_password"
                              Variant="Variant.Outlined"
                              Placeholder="Senha"
                              InputType="@PasswordInputType"
                              Adornment="Adornment.End"
                              AdornmentColor="Color.Success"
                              AdornmentIcon="@PasswordInputIcon"
                              OnAdornmentClick="(() => this.ChangePasswordVisibility())">
                </MudTextField>

                <MudText Typo="Typo.subtitle2"
                         Class="mt-1 mb-7">
                    <a style="font-weight:400; font-size: .8rem" href="#">Esqueci a senha</a>
                </MudText>
            </MudContainer>

            <MudButton Class="mb-7 w-75"
                       Style="border-radius: 20px; background-color: #019863; color: white"
                       ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Size="Size.Large"
                       OnClick="SubmitLogin">
                Entrar
            </MudButton>
            @if (isLoading) {
                <MudProgressCircular Class="my-3" Indeterminate="true" Color="Color.Primary" />
            }

        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Inject]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public string _email { get; set; }

    [Parameter]
    public string _password { get; set; }

    [Parameter]
    public bool isPasswordVisible { get; set; }

    public string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    public InputType PasswordInputType = InputType.Password;

    public bool isLoading = false;

    private void ChangePasswordVisibility() {
        if (isPasswordVisible) {
            isPasswordVisible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInputType = InputType.Password;
            return;
        }

        isPasswordVisible = true;
        PasswordInputIcon = Icons.Material.Filled.Visibility;
        PasswordInputType = InputType.Text;
    }

    async Task SubmitLogin() {
        var loginRequest = new UserLoginRequest
        {
            Email = _email,
            Password = _password
        };
        try
        {
            isLoading = true;
            var result = await authService.Login(loginRequest);
            if (!result.IsSuccess)
            {
                await DialogService.ShowMessageBox("Erro ao logar!", "Verifique os dados do login.", "OK");
                return;
            }

            await LocalStorage.RemoveItemsAsync(["accessToken", "refreshToken", "userPhoto"]);

            await LocalStorage.SetItemAsStringAsync("accessToken", result.AccessToken!);
            await LocalStorage.SetItemAsStringAsync("refreshToken", result.RefreshToken!);
            
            Navigation.NavigateTo("feed");
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message, ex);
        }
        finally {
            isLoading = false;
        }
    }
}