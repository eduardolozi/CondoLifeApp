@using Microsoft.AspNetCore.Authentication
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<style>
    .link-sidebar {
        font-family: 'Roboto';
    }
    
    .sidebar[b-qgsvw684bo] {
        background: #105444;
        
    }
    
    .sidebar {
        background: linear-gradient(to bottom, #105444, #115e59);
    }

    .fundo-logo {
        background-color: #105444 !important;
    }

    .mud-nav-link-expand-icon {
        color: white !important;
    }

    .mud-nav-link:not(.mud-nav-link-disabled) .mud-nav-link-icon.mud-nav-link-icon-default {
        color: white !important;
    }
    
    .logo:hover {
        cursor: pointer;
    }

</style>

<div class="top-row ps-3 navbar navbar-dark fundo-logo pt-0 ps-0 mb-2">
    <div class="container-fluid d-flex flex-row justify-content-start pt-0">
        <img class="logo" src="/logo-condolife.png" style="width: 40px; height: 40px;" @onclick="NavigateToInitialPage"/>
        <p class="text-white fw-bold ms-2 pt-5 fs-4">Condolife</p>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable sidebar" onclick="document.querySelector('.navbar-toggler').click()">
    <MudNavMenu class="flex-column">
        <div class="nav-item ms-0 px-3">
            <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="feed" Match="NavLinkMatch.All">
                <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.Diversity1"></MudIcon> Comunidade
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="configuracoes">
                <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.Settings"></MudIcon> Configurações
            </NavLink>
        </div>
        
        <div class="nav-item px-3">
            <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="votacoes">
                <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.Poll"></MudIcon> Votações
            </NavLink>
        </div>
        
        <MudNavGroup Style="color: white" class="nav-item px-3 pb-2" Title="Reservas e Espaços" Icon="@Icons.Material.Outlined.AccountBalance">
            <div class="nav-item px-3 py-0">
                <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="espacos">
                    <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.AccountBalance"></MudIcon> Espaços
                </NavLink>
            </div>
            <div class="nav-item px-3 py-0">
                <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="minhas-reservas">
                    <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.Workspaces"></MudIcon> Minhas Reservas
                </NavLink>
            </div>
        </MudNavGroup>
        
        @if (_user.Role is UserRoleEnum.Manager || _user.Role is UserRoleEnum.Submanager)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="users">
                    <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.Group"></MudIcon> Usuários
                </NavLink>
            </div>
        }

        <div class="nav-item px-3">
            <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="notificacoes">
                <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.Notifications"/>
                Notificações
            </NavLink>
        </div>
    </MudNavMenu>
</div>

@code
{
    [Inject] private AuthService _authService { get; set; }
    [Inject] private UserService _userService { get; set; }
    string _base64Image = string.Empty;
    User? _user = new User();
    HubConnection _hubConnection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _user = await _authService.GetUserByClaims();
                StateHasChanged();
            }
            catch (AuthenticationFailureException ex)
            {
                var result = await DialogService.ShowMessageBox("Erro!", ex.Message);
                Navigation.NavigateTo("login");
            }
        }
    }

    void NavigateToInitialPage()
    {
        Navigation.NavigateTo("feed");
    }
}

