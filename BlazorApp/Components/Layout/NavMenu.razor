<style>
    .link-sidebar {
        font-family: 'Roboto';
    }

    .sidebar {
        background: linear-gradient(to bottom, #105444, #115e59);
    }

    .fundo-logo {
        background-color: #105444 !important;
    }

</style>

<div class="top-row ps-3 navbar navbar-dark fundo-logo pt-0 ps-0">
    <div class="container-fluid d-flex flex-row justify-content-start pt-0">
        <img src="/logo-condolife.png" style="width: 40px; height: 40px;" />
        <p class="text-white fw-bold ms-2 pt-5 fs-4">Condolife</p>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable sidebar" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item ms-0 px-3">
            <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="inicial" Match="NavLinkMatch.All">
                <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.Home"></MudIcon> Página Inicial
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="configuracoes">
                <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.Settings"></MudIcon> Configurações
            </NavLink>
        </div>
        
        @if (_user.Role is UserRoleEnum.Manager)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link fw-bold d-flex flex-row align-content-center link-sidebar" href="espacos">
                    <MudIcon Class="me-2" Icon="@Icons.Material.Outlined.AccountBalance"></MudIcon> Espaços
                </NavLink>
            </div>
        }
    </nav>
</div>

@code
{
    [Inject] private AuthService _authService { get; set; }
    [Inject] private UserService _userService { get; set; }
    string _base64Image = string.Empty;
    User? _user = new User();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _user = await _authService.GetUserByClaims();
        }
    }
}

