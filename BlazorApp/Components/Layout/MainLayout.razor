@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation
<MudPopoverProvider />
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<style>
    .top-bar {
        background-color: #ffffff !important;
    }
</style>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    HubConnection _hubConnection;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JSRuntime.InvokeAsync<string>("getToken");
            if (!string.IsNullOrEmpty(token))
            {
                _hubConnection = new HubConnectionBuilder()
                    .WithUrl("https://localhost:7031/notificationHub", options =>
                    {
                        options.Headers.Add("Authorization", $"Bearer {token}");
                    })
                    .WithAutomaticReconnect()
                    .Build();

                _hubConnection.On<string>("UserReceiveNotificationsToReadCount", (message) =>
                {
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                    Snackbar.Configuration.SnackbarVariant = Variant.Text;
                    Snackbar.Add
                    (
                        @<h6 class="my-0 py-0">@message</h6>,
                        Severity.Info
                    );
                });
                _hubConnection.On<NotificationPayload>("UserReceiveNotification", (message) =>
                {
                    var severity = message.ResultCategory switch
                    {
                        NotificationResultEnum.Approved => Severity.Success,
                        NotificationResultEnum.Cancelled => Severity.Error,
                        NotificationResultEnum.Info => Severity.Info,
                        NotificationResultEnum.Warning => Severity.Warning,
                        _ => Severity.Info
                    };
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                    Snackbar.Configuration.SnackbarVariant = Variant.Text;
                    Snackbar.Add
                    (
                        @<div>
                            <h5>@message.Header</h5>
                            <ul>
                                <li>@message.Body</li>
                            </ul>
                        </div>,
                        severity
                    );
                });
                await _hubConnection.StartAsync();
            }
        }
    }
}
